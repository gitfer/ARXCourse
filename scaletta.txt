
*) Pattern MVC
	MVC: 2 modelli di interazione (passive view, supervising controller)
*) ASPNET.MVC
	MVC4 (async controllers, bundling/minification, App_start e separate classes, DisplayModes based on requests, OAuth e OpenID)
	MVC5 (bootstrap, authentication filters before authorization filters, filter overrides in higher scopes, attribute routing)
*) ASPNET.vNext (a.k.a. ASP.NET 5)
*) Perchè usare ASPNET.MVC
	Punti di forza di ASPNET.MVC 
*) E allora perchè WebAPI?
*) ASPNET.MVC+WebAPI
*) Perchè REST e non SOAP +
	Cosa è REST (6 principi di rest architectures) +
	Cosa è JSON +
	HATEOAS +
	Rest best practices (Return statuses) +
	Tools
*) Client Web, desiderata
*) JavaScript
	cosa è, breve storia
	Good Parts
		JSLint, JSHint
	Bad Parts: esempi + wat examples +
	hoisting +
*) JavaScript serverside: NodeJS
	cosa è NodeJS
	Automazione task ripetitivi: GruntJS
	Package Management: Bower (through npm)
*) UI concerns from a dev Point Of View
	Preprocessori CSS: Sass e Less
	Linguaggi costruiti su JavaScript: CoffeScript, TypeScript +
*) angularjs +
	ng-app
	moduli
	controller/filtri/servizi/direttive
	$http/$resource
*) Applicazioni real-time: signalr +
*) Testing +
	unitario:
		jasmine ecc./n(x)unit+moq/
	integrazione:

	UI:
	pro/contro
	selenium webdriver
